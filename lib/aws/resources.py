
import re


class Resources(dict):

    # https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces

    types = {
        "AWS::Account":                                                     "arn:aws:iam::{Account}:root",
        # "AWS::A4b:Resource":                                              "arn:aws:a4b:{Region}:{Account}:{ResourceType}",
        # "AWS::Acm::Certificate":                                          "arn:aws:acm:{Region}:{Account}:certificate/{CertificateId}",
        # "AWS::AcmPca::CertificateAuthority":                              "arn:aws:acm-pca:{Region}:{Account}:certificate-authority/{CaId}",
        # "AWS::ApiGateway::Resource":                                      "arn:aws:apigateway:{Region}::{Name}",
        # "AWS::AppMesh::Mesh":                                             "arn:aws:appmesh:{Region}:{Account}:mesh/{Mesh}$",
        # "AWS::AppMesh::VirtualNode":                                      "arn:aws:appmesh:{Region}:{Account}:mesh/{Mesh}/virtualNode/{VirtualNode}",
        # "AWS::AppMesh::VirtualRoute":                                     "arn:aws:appmesh:{Region}:{Account}:mesh/{Mesh}/virtualRouter/{VirtualRouter}/route/{Route}",
        # "AWS::AppMesh::VirtualRouter":                                    "arn:aws:appmesh:{Region}:{Account}:mesh/{Mesh}/virtualRouter/{VirtualRouter}$",
        # "AWS::AppMesh::VirtualService":                                   "arn:aws:appmesh:{Region}:{Account}:mesh/{Mesh}/virtualService/{VirtualService}",
        # "AWS::AppSync::Mutation":                                         "arn:aws:appsync:{Region}:{Account}:apis/AppSyncEndpointName/types/Mutation/fields/{Field}",
        # "AWS::AppSync::Query":                                            "arn:aws:appsync:{Region}:{Account}:apis/AppSyncEndpointName/types/Query/fields/{Field}",
        # "AWS::AppSync::Subscription":                                     "arn:aws:appsync:{Region}:{Account}:apis/AppSyncEndpointName/types/Subscription/fields/{Field}",
        # "AWS::Artifact::ReportPackage":                                   "arn:aws:artifact:::report-package/{Name}/{Name}",
        # "AWS::Athena::WorkGroup":                                         "arn:aws:athena:{Region}:{Account}:workgroup/{WorkGroup}",
        # "AWS::AutoScaling::AppScalingPolicy":                             "arn:aws:autoscaling:{Region}:{Account}:scalingPolicy:{PolicyId}:resource/{ServiceNamespace}/{ResourceId}:policyName/{Policy}",
        # "AWS::AutoScaling::AppScheduledAction":                           "arn:aws:autoscaling:{Region}:{Account}:scheduledAction:{ActionId}:resource/{ServiceNamespace}/{ResourceId}:scheduledActionName/{Action}",
        # "AWS::AutoScaling::Ec2ScalingGroup":                              "arn:aws:autoscaling:{Region}:{Account}:autoScalingGroup:{GroupId}:autoScalingGroupName/{Group}",
        # "AWS::AutoScaling::Ec2ScalingPolicy":                             "arn:aws:autoscaling:{Region}:{Account}:scalingPolicy:{PolicyId}:autoScalingGroupName/{Group}:policyName/{Policy}",
        # "AWS::Batch::ComputeEnvironment":                                 "arn:aws:batch:{Region}:{Account}:compute-environment/{Name}",
        # "AWS::Batch::JobDefinition":                                      "arn:aws:batch:{Region}:{Account}:job-definition/{Job}:{Revision}",
        # "AWS::Batch::JobQueue":                                           "arn:aws:batch:{Region}:{Account}:job-queue/{Queue}",
        # "AWS::Cloud9::Environment":                                       "arn:aws:cloud9:{Region}:{Account}:environment:{EnvironmentId}",
        # "AWS::CloudDirectory::Directory":                                 "arn:aws:clouddirectory:{Region}:{Account}:directory/{DirectoryId}",
        # "AWS::CloudFormation::ChangeSet":                                 "arn:aws:cloudformation:{Region}:{Account}:{Changeset}/{Changeset}/{AdditionalIdentifier}",
        # "AWS::CloudFormation::Stack":                                     "arn:aws:cloudformation:{Region}:{Account}:stack/{Stack}/{AdditionalIdentifier}",
        # "AWS::CloudFormation::StackSet":                                  "arn:aws:cloudformation:{Region}:{Account}:stackset/{StackSet}:{Id}",
        # "AWS::CloudFront::Resource":                                      "arn:aws:cloudfront::{Account}:{Name}",
        # "AWS::CloudSearch::Domain":                                       "arn:aws:cloudsearch:{Region}:{Account}:domain/{Domain}",
        # "AWS::CloudTrail::Trail":                                         "arn:aws:cloudtrail:{Region}:{Account}:trail/{Trail}",
        # "AWS::CloudWatch::Alarm":                                         "arn:aws:cloudwatch:{Region}:{Account}:alarm:{Alarm}",
        # "AWS::CloudWatch::Dashboard":                                     "arn:aws:cloudwatch::{Account}:dashboard/{Dashboard}",
        # "AWS::CodeBuild::Build":                                          "arn:aws:codebuild:{Region}:{Account}:build/{Name}:{Name}",
        # "AWS::CodeBuild::Project":                                        "arn:aws:codebuild:{Region}:{Account}:project/{Name}",
        # "AWS::CodeCommit::Repo":                                          "arn:aws:codecommit:{Region}:{Account}:{Resourcespecifier}",
        # "AWS::CodeDeploy::Resource":                                      "arn:aws:codedeploy:{Region}:{Account}:{ResourceType}(:|/){Name}",
        # "AWS::CodePipeline::Pipeline":                                    "arn:aws:codepipeline:{Region}:{Account}:{Resourcespecifier}",
        # "AWS::CodeStar::Project":                                         "arn:aws:codestar:{Region}:{Account}:project/{Resourcespecifier}",
        # "AWS::CognitoIdentity::IdentityPool":                             "arn:aws:cognito-identity:{Region}:{Account}/identitypool/{IdentityPoolId}",
        # "AWS::CognitoIdp::UserPool":                                      "arn:aws:cognito-idp:{Region}:{Account}:userpool/{UserPoolId}(:{Name})?",
        # "AWS::CognitoSync::IdentityPool":                                 "arn:aws:cognito-sync:{Region}:{Account}:identitypool/{IdentityPoolId}(:{Identity})?",
        # "AWS::Config::ConfigRule":                                        "arn:aws:config:{Region}:{Account}:config-rule/{ConfigRuleId}",
        # "AWS::DataSync::Agent":                                           "arn:aws:datasync:{Region}:{Account}:agent/{AgentId}",
        # "AWS::DataSync::Location":                                        "arn:aws:datasync:{Region}:{Account}:location/{LocationId}",
        # "AWS::DataSync::Task":                                            "arn:aws:datasync:{Region}:{Account}:task/{TaskId}",
        # "AWS::DirectConnect::Dxcon":                                      "arn:aws:directconnect:{Region}:{Account}:dxcon/{ConnectionId}",
        # "AWS::DirectConnect::DxGateway":                                  "arn:aws:directconnect:{Region}:{Account}:dx-gateway/{DirectConnectgatewayId}",
        # "AWS::DirectConnect::Dxlag":                                      "arn:aws:directconnect:{Region}:{Account}:dxlag/{LagId}",
        # "AWS::DirectConnect::Dxvif":                                      "arn:aws:directconnect:{Region}:{Account}:dxvif/{VirtualinterfaceId}",
        # "AWS::Ds::Directory":                                             "arn:aws:ds:{Region}:{Account}:directory/{DirectoryId}",
        # "AWS::DynamoDb::Index":	                                        "arn:aws:dynamodb:{Region}:{Account}:table/{TableName}/index/{IndexName}",
        # "AWS::DynamoDb::Stream":                        	                "arn:aws:dynamodb:{Region}:{Account}:table/{TableName}/stream/{StreamLabel}",
        # "AWS::DynamoDb::Table":                                           "arn:aws:dynamodb:{Region}:{Account}:table/{Table}",
        # "AWS::DynamoDb::Backup":    	                                    "arn:aws:dynamodb:{Region}:{Account}:table/{TableName}/backup/{BackupName}",
        # "AWS::DynamoDb::GlobalTable":	                                    "arn:aws:dynamodb::{Account}:global-table/{GlobalTableName}",
        "AWS::Ec2::CapacityReservation":                                    "arn:aws:ec2:{Region}:{Account}:capacity-reservation/{ReservationId}",
        "AWS::Ec2::ClientVpnEndpoint":                                      "arn:aws:ec2:{Region}:{Account}:client-vpn-endpoint/{EndpointId}",
        "AWS::Ec2::CustomerGateway":                                        "arn:aws:ec2:{Region}:{Account}:customer-gateway/{CgwId}",
        "AWS::Ec2::DhcpOptions":                                            "arn:aws:ec2:{Region}:{Account}:dhcp-options/{DhcpOptionsId}",
        "AWS::Ec2::DedicatedHost":                                          "arn:aws:ec2:{Region}:{Account}:dedicated-host/${HostId}",
        "AWS::Ec2::ElasticGpu":                                             "arn:aws:ec2:{Region}:{Account}:elastic-gpu/{ElasticGpuId}",
        "AWS::Ec2::FpgaImage":                                              "arn:aws:ec2:{Region}::fpga-image/{Name}",
        "AWS::Ec2::Image":                                                  "arn:aws:ec2:{Region}:({Account})?:image/{ImageId}",
        "AWS::Ec2::Instance":                                               "arn:aws:ec2:{Region}:{Account}:instance/{InstanceId}",
        "AWS::Ec2::InternetGateway":                                        "arn:aws:ec2:{Region}:{Account}:internet-gateway/{InternetGatewayId}",
        "AWS::Ec2::KeyPair":                                                "arn:aws:ec2:{Region}:{Account}:key-pair/{KeyName}",
        "AWS::Ec2::LaunchTemplate":                                         "arn:aws:ec2:{Region}:{Account}:launch-template/{LaunchTemplateId}",
        "AWS::Ec2::LocalGateway":                                           "arn:aws:ec2:{Region}:{Account}:local-gateway/{LocalGatewayId}",
        "AWS::Ec2::LocalGatewayRouteTable":                                 "arn:aws:ec2:{Region}:{Account}:local-gateway-route-table/{LocalGatewayRouteTableId}",
        "AWS::Ec2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation": "arn:aws:ec2:{Region}:{Account}:local-gateway-route-table-virtual-interface-group-association/{LocalGatewayRouteTableVirtualInterfaceGroupAssociationId}",
        "AWS::Ec2::LocalGatewayRouteTableVpcAssociation":                   "arn:aws:ec2:{Region}:{Account}:local-gateway-route-table-vpc-association/{LocalGatewayRouteTableVpcAssociationId}",
        "AWS::Ec2::LocalGatewayVirtualInterface":                           "arn:aws:ec2:{Region}:{Account}:local-gateway-virtual-interface/{LocalGatewayVirtualInterfaceId}",
        "AWS::Ec2::LocalGatewayVirtualInterfaceGroup":                      "arn:aws:ec2:{Region}:{Account}:local-gateway-virtual-interface-group/{LocalGatewayVirtualInterfaceGroupId}",
        "AWS::Ec2::NetworkAcl":                                             "arn:aws:ec2:{Region}:{Account}:network-acl/{NetworkAclId}",
        "AWS::Ec2::NetworkInterface":                                       "arn:aws:ec2:{Region}:{Account}:network-interface/{NetworkInterfaceId}",
        "AWS::Ec2::PlacementGroup":                                         "arn:aws:ec2:{Region}:{Account}:placement-group/{PlacementGroup}",
        "AWS::Ec2::ReservedInstances":                                      "arn:aws:ec2:{Region}:{Account}:reserved-instances/{ReservationId}",
        "AWS::Ec2::RouteTable":                                             "arn:aws:ec2:{Region}:{Account}:route-table/{RouteTableId}",
        "AWS::Ec2::SecurityGroup":                                          "arn:aws:ec2:{Region}:{Account}:security-group/{GroupId}",
        "AWS::Ec2::Snapshot":                                               "arn:aws:ec2:{Region}:{Account}:snapshot/{SnapshotId}",
        "AWS::Ec2::SpotInstanceRequest":                                    "arn:aws:ec2:{Region}::spot-instance-request/{Name}",
        "AWS::Ec2::Subnet":                                                 "arn:aws:ec2:{Region}:{Account}:subnet/{SubnetId}",
        "AWS::Ec2::TrafficMirrorSession":                                   "arn:aws:ec2:{Region}:{Account}:traffic-mirror-session/{TrafficMirrorSessionId}",
        "AWS::Ec2::TrafficMirrorTarget":                                    "arn:aws:ec2:{Region}:{Account}:traffic-mirror-target/{TrafficMirrorTargetId}",
        "AWS::Ec2::TrafficMirrorFilter":                                    "arn:aws:ec2:{Region}:{Account}:traffic-mirror-filter/{TrafficMirrorFilterId}",
        "AWS::Ec2::TrafficMirrorFilterRule":                                "arn:aws:ec2:{Region}:{Account}:traffic-mirror-filter-rule/{TrafficMirrorFilterRuleId}",
        "AWS::Ec2::TransitGateway":                                         "arn:aws:ec2:{Region}:{Account}:transit-gateway/{TgwId}",
        "AWS::Ec2::TransitGatewayAttachment":                               "arn:aws:ec2:{Region}:{Account}:transit-gateway-attachment/{TgwattachmentId}",
        "AWS::Ec2::TransitGatewayMulticastDomain":                          "arn:aws:ec2:{Region}:{Account}:transit-gateway-multicast-domain/{TransitGatewayMulticastDomainId}",
        "AWS::Ec2::TransitGatewayRouteTable":                               "arn:aws:ec2:{Region}:{Account}:transit-gateway-route-table/{TgwroutetableId}",
        "AWS::Ec2::Volume":                                                 "arn:aws:ec2:{Region}:{Account}:volume/{VolumeId}",
        "AWS::Ec2::Vpc":                                                    "arn:aws:ec2:{Region}:{Account}:vpc/{VpcId}",
        "AWS::Ec2::VpcEndpoint":                                            "arn:aws:ec2:{Region}:{Account}:vpc-endpoint/{VpcEndpointId}",
        "AWS::Ec2::VpcEndpointService":                                     "arn:aws:ec2:{Region}:{Account}:vpc-endpoint/{VpcEndpointServiceId}",
        "AWS::Ec2::VpcFlowLog":                                             "arn:aws:ec2:{Region}:{Account}:vpc-flow-log/{VpcFlowLogId}",
        "AWS::Ec2::VpcPeeringConnection":                                   "arn:aws:ec2:{Region}:{Account}:vpc-peering-connection/{VpcPeeringConnectionId}",
        "AWS::Ec2::VpnConnection":                                          "arn:aws:ec2:{Region}:{Account}:vpn-connection/{VpnConnectionId}",
        "AWS::Ec2::VpnGateway":                                             "arn:aws:ec2:{Region}:{Account}:vpn-gateway/{VpnGatewaygwId}",
        # "AWS::Ecr::Repository":                                           "arn:aws:ecr:{Region}:{Account}:repository/{Repository}",
        # "AWS::Ecs::Cluster":                                              "arn:aws:ecs:{Region}:{Account}:cluster/{Cluster}",
        # "AWS::Ecs::Container":                                            "arn:aws:ecs:{Region}:{Account}:container/{ContainerId}",
        # "AWS::Ecs::ContainerInstance":                                    "arn:aws:ecs:{Region}:{Account}:container-instance/{Cluster}/{ContainerInstanceId}",
        # "AWS::Ecs::Service":                                              "arn:aws:ecs:{Region}:{Account}:service/{Cluster}/{Service}",
        # "AWS::Ecs::Task":                                                 "arn:aws:ecs:{Region}:{Account}:task/{Cluster}/{TaskId}",
        # "AWS::Ecs::TaskDefinition":                                       "arn:aws:ecs:{Region}:{Account}:task-definition/{TaskDefinitionFamily}:{TaskDefinitionRevisionNumber}",
        "AWS::Eks::Cluster":                                                "arn:aws:eks:{Region}:{Account}:cluster/{Cluster}",
        "AWS::Eks::FargateProfile":                                         "arn:aws:eks:{Region}:{Account}:fargateprofile/{Cluster}/{FargateProfile}/{FargateProfileId}",
        "AWS::Eks::Nodegroup":                                              "arn:aws:eks:{Region}:{Account}:nodegroup/{Cluster}/{Nodegroup}/{NodegroupId}",
        # "AWS::ElastiCache::Resource":                                     "arn:aws:elasticache:{Region}:{Account}:{ResourceType}:{Resource}",
        # "AWS::ElasticBeanstalk::Application":                             "arn:aws:elasticbeanstalk:{Region}:{Account}:application/{Application}",
        # "AWS::ElasticBeanstalk::Applicationversion":                      "arn:aws:elasticbeanstalk:{Region}:{Account}:applicationversion/{Application}/{Versionlabel}",
        # "AWS::ElasticBeanstalk::Configurationtemplate":                   "arn:aws:elasticbeanstalk:{Region}:{Account}:configurationtemplate/{Application}/{Template}",
        # "AWS::ElasticBeanstalk::Environment":                             "arn:aws:elasticbeanstalk:{Region}:{Account}:environment/{Application}/{Environment}",
        # "AWS::ElasticBeanstalk::Solutionstack":                           "arn:aws:elasticbeanstalk:{Region}::solutionstack/{Name}",
        # "AWS::ElasticFilesystem::FileSystem":                             "arn:aws:elasticfilesystem:{Region}:{Account}:file-system/{FileSystemId}",
        # "AWS::ElasticLoadBalancing::Listener":                            "arn:aws:elasticloadbalancing:{Region}:{Account}:listener/(app|net)/{Loadbalancer}",
        # "AWS::ElasticLoadBalancing::ListenerRule":                        "arn:aws:elasticloadbalancing:{Region}:{Account}:listener-rule/(app|net)/{Loadbalancer}",
        # "AWS::ElasticLoadBalancing::LoadBalancer":                        "arn:aws:elasticloadbalancing:{Region}:{Account}:loadbalancer/(app|net)/{Loadbalancer}",
        # "AWS::ElasticLoadBalancing::TargetGroup":                         "arn:aws:elasticloadbalancing:{Region}:{Account}:targetgroup/{Targetgroup}/{TargetgroupId}",
        # "AWS::ElasticLoadBalancing::ClassicLoadBalancer":                 "arn:aws:elasticloadbalancing:{Region}:{Account}:loadbalancer/{App}",
        # "AWS::ElasticTranscoder::Preset":                                 "arn:aws:elastictranscoder:{Region}:{Account}:preset/{Name}",
        # "AWS::ElasticTranscoder::Resource":                               "arn:aws:elastictranscoder:{Region}:{Account}:{Resource}/{Id}",
        # "AWS::Es::Domain":                                                "arn:aws:es:{Region}:{Account}:domain/{Domain}",
        # "AWS::Events::EventBus":                                          "arn:aws:events:{Region}:{Account}:{Name}",
        # "AWS::Events::Rule":                                              "arn:aws:events:{Region}:{Account}:rule/{Name}",
        # "AWS::ExecuteApi::Api":                                           "arn:aws:execute-api:{Region}:{Account}:{ApiId}/{Stage}/{Httpverb}",
        # "AWS::Firehose::Deliverystream":                                  "arn:aws:firehose:{Region}:{Account}:deliverystream/{Deliverystream}",
        # "AWS::Glacier::Vault":                                            "arn:aws:glacier:{Region}:{Account}:vaults/{Vault}",
        # "AWS::GlobalAccelerator::Accelerator":                            "arn:aws:globalaccelerator::{Account}:accelerator/{AcceleratorId}",
        # "AWS::Groundstation::Config":                                     "arn:aws:groundstation:{Region}:{Account}:config/{ConfigType}/{ConfigId}",
        # "AWS::Groundstation::Contact":                                    "arn:aws:groundstation:{Region}:{Account}:contact/{ContactId}",
        # "AWS::Groundstation::MissionProfile":                             "arn:aws:groundstation:{Region}:{Account}:mission-profile/{MissionProfileId}",
        # "AWS::Groundstation::Satellite":                                  "arn:aws:groundstation:{Region}:{Account}:satellite/{SatelliteId}",
        # "AWS::GuardDuty::Detector":                                       "arn:aws:guardduty:{Region}:{Account}:detector/{DetectorId}$",
        # "AWS::GuardDuty::Filter":                                         "arn:aws:guardduty:{Region}:{Account}:detector/{DetectorId}/filter/{Filter}",
        # "AWS::GuardDuty::IpSet":                                          "arn:aws:guardduty:{Region}:{Account}:detector/{DetectorId}/ipset/{IpSetId}",
        # "AWS::GuardDuty::ThreatIntelSet":                                 "arn:aws:guardduty:{Region}:{Account}:detector/{DetectorId}/threatintelset/{ThreatIntelSetId}",
        # "AWS::Health::Entity":                                            "arn:aws:health:{Region}:{Account}:entity/{EntityId}",
        # "AWS::Health::Event":                                             "arn:aws:health:{Region}::event/{Name}",
        "AWS::Iam::AccessReport":                                           "arn:aws:iam::{Account}:access-report/{EntityPath}",
        "AWS::Iam::AssumedRole":                                            "arn:aws:iam::{Account}:assumed-role/{Role}/{RoleSessionName}",
        "AWS::Iam::FederatedUser":                                          "arn:aws:iam::{Account}:federated-user/{User}",
        "AWS::Iam::Group":                                                  "arn:aws:iam::{Account}:group/{Group}",
        "AWS::Iam::InstanceProfile":                                        "arn:aws:iam::{Account}:instance-profile/{InstanceProfile}",
        "AWS::Iam::VirtualMfaDevice":                                       "arn:aws:iam::{Account}:mfa/{UserName}",
        "AWS::Iam::MfaDevice":                                              "arn:aws:iam::{Account}:u2f/user/{UserName}/{MfaDevice}",
        "AWS::Iam::OidcProvider":                                           "arn:aws:iam::{Account}:oidc-provider/{Provider}",
        "AWS::Iam::Policy":                                                 "arn:aws:iam::{Account}:policy/{Policy}",
        "AWS::Iam::Role":                                                   "arn:aws:iam::{Account}:role/{Role}",
        "AWS::Iam::SamlProvider":                                           "arn:aws:iam::{Account}:saml-provider/{Provider}",
        "AWS::Iam::ServerCertificate":                                      "arn:aws:iam::{Account}:server-certificate/{Certificate}",
        "AWS::Iam::SmsMfa":                                                 "arn:aws:iam::{Account}:sms-mfa/{MfaTokenIdWithPath}",
        "AWS::Iam::U2F":                                                    "arn:aws:iam::{Account}:u2f/{U2FTokenId}",
        "AWS::Iam::User":                                                   "arn:aws:iam::{Account}:user/{UserName}",
        # "AWS::Iot::Cert":                                                 "arn:aws:iot:{Region}:{Account}:cert/{CertId}",
        # "AWS::Iot::Client":                                               "arn:aws:iot:{Region}:{Account}:client/{ClientId}(/{Rule})?",
        # "AWS::Iot::Policy":                                               "arn:aws:iot:{Region}:{Account}:policy/{Policy}",
        # "AWS::Iot::Rule":                                                 "arn:aws:iot:{Region}:{Account}:rule/{Rule}",
        # "AWS::Kafka::Cluster":                                            "arn:aws:kafka:{Region}:{Account}:cluster/{Cluster}/{ClusterId}",
        # "AWS::Kafka::Configuration":                                      "arn:aws:kafka:{Region}:{Account}:configuration/{Configuration}/{ConfigurationId}",
        # "AWS::KinesisAnalytics::Application":                             "arn:aws:kinesisanalytics:{Region}:{Account}:application/{Application}",
        # "AWS::Kinesis::Stream":                                           "arn:aws:kinesis:{Region}:{Account}:stream/{Stream}",
        # "AWS::KinesisVideo::Application":                                 "arn:aws:kinesisvideo:{Region}:{Account}:application/stream-name/{Code}",
        # "AWS::KinesisVideo::Stream":                                      "arn:aws:kinesisvideo:{Region}:{Account}:stream/example-stream-name/{Name}",
        # "AWS::Kms::Alias":                                                "arn:aws:kms:{Region}:{Account}:alias/{Alias}",
        # "AWS::Kms::Key":                                                  "arn:aws:kms:{Region}:{Account}:key/{KeyId}",
        "AWS::Lambda::EventSourceMapping":                                  "arn:aws:lambda:{Region}:{Account}:event-source-mapping:{EventSourceMappingId}",
        "AWS::Lambda::Function":                                            "arn:aws:lambda:{Region}:{Account}:function:{Function}(:{Alias})?",
        "AWS::Lambda::Layer":                                               "arn:aws:lambda:{Region}:{Account}:layer:{Layer}$",
        "AWS::Lambda::LayerVersion":                                        "arn:aws:lambda:{Region}:{Account}:layer:{Layer}:{Version}",
        # "AWS::LightSail::CloudFormationStackRecord":                      "arn:aws:lightsail:{Region}:{Account}:CloudFormationStackRecord/{CloudFormationStackRecordId}",
        # "AWS::LightSail::Disk":                                           "arn:aws:lightsail:{Region}:{Account}:Disk/{DiskId}",
        # "AWS::LightSail::DiskSnapshot":                                   "arn:aws:lightsail:{Region}:{Account}:DiskSnapshot/{DiskSnapshotId}",
        # "AWS::LightSail::Domain":                                         "arn:aws:lightsail:global:{Account}:Domain/{DomainId}",
        # "AWS::LightSail::ExportSnapshotRecord":                           "arn:aws:lightsail:{Region}:{Account}:ExportSnapshotRecord/{ExportSnapshotRecordId}",
        # "AWS::LightSail::Instance":                                       "arn:aws:lightsail:{Region}:{Account}:Instance/{InstanceId}",
        # "AWS::LightSail::Instancesnapshot":                               "arn:aws:lightsail:{Region}:{Account}:InstanceSnapshot/{InstancesnapshotId}",
        # "AWS::LightSail::Keypair":                                        "arn:aws:lightsail:{Region}:{Account}:KeyPair/{KeyName}",
        # "AWS::LightSail::Loadbalancer":                                   "arn:aws:lightsail:{Region}:{Account}:LoadBalancer/{LoadbalancerId}",
        # "AWS::LightSail::LoadBalancerTlsCertificate":                     "arn:aws:lightsail:{Region}:{Account}:LoadBalancerTlsCertificate/{LoadBalancerTlsCertificateId}",
        # "AWS::LightSail::RelationalDatabase":                             "arn:aws:lightsail:{Region}:{Account}:RelationalDatabase{RelationalDatabase}",
        # "AWS::LightSail::RelationalDatabaseSnapshot":                     "arn:aws:lightsail:{Region}:{Account}:RelationalDatabaseSnapshot/{RelationalDatabaseSnapshotId}",
        # "AWS::LightSail::Staticip":                                       "arn:aws:lightsail:{Region}:{Account}:StaticIp/{StaticipId}",
        # "AWS::Logs::LogGroup":                                            "arn:aws:logs:{Region}:{Account}:log-group:{Name}(:{Name})?",
        # "AWS::Logs::Log":                                                 "arn:aws:logs:{Region}:{Account}:{Name}",
        # "AWS::MachineLearning::Batchprediction":                          "arn:aws:machinelearning:{Region}:{Account}:batchprediction/{BatchpredictionlId}",
        # "AWS::MachineLearning::Datasource":                               "arn:aws:machinelearning:{Region}:{Account}:datasource/{DatasourceId}",
        # "AWS::MachineLearning::Evaluation":                               "arn:aws:machinelearning:{Region}:{Account}:evaluation/{EvaluationId}",
        # "AWS::MachineLearning::Mlmodel":                                  "arn:aws:machinelearning:{Region}:{Account}:mlmodel/{MlmodelId}",
        # "AWS::Macie::Trigger":                                            "arn:aws:macie:{Region}:{Account}:trigger/{TriggerId}",
        # "AWS::MediaConnect::Entitlement":                                 "arn:aws:mediaconnect:{Region}:{Account}:entitlement:{ResourceId}:{Resource}",
        # "AWS::MediaConnect::Flow":                                        "arn:aws:mediaconnect:{Region}:{Account}:flow:{ResourceId}:{Resource}",
        # "AWS::MediaConnect::Output":                                      "arn:aws:mediaconnect:{Region}:{Account}:output:{ResourceId}:{Resource}",
        # "AWS::MediaConnect::Source":                                      "arn:aws:mediaconnect:{Region}:{Account}:source:{ReSourceId}:{ReSource}",
        # "AWS::MediaConvert::Job":                                         "arn:aws:mediaconvert:{Region}:{Account}:jobs/{JobId}",
        # "AWS::MediaConvert::JobTemplate":                                 "arn:aws:mediaconvert:{Region}:{Account}:jobTemplates/{JobTemplate}",
        # "AWS::MediaConvert::Preset":                                      "arn:aws:mediaconvert:{Region}:{Account}:presets/{Preset}",
        # "AWS::MediaConvert::Queue":                                       "arn:aws:mediaconvert:{Region}:{Account}:queues/{Queue}",
        # "AWS::MediaLive::Channel":                                        "arn:aws:medialive:{Region}:{Account}:channel:{ChannelId}",
        # "AWS::MediaLive::Input":                                          "arn:aws:medialive:{Region}:{Account}:input:{InputId}",
        # "AWS::MediaLive::InputSecurityGroup":                             "arn:aws:medialive:{Region}:{Account}:{Channel}:{ChannelId}",
        # "AWS::MediaPackage::Channel":                                     "arn:aws:mediapackage:{Region}:{Account}:channels/{ChannelId}",
        # "AWS::MediaPackage::OriginEndpoint":                              "arn:aws:mediapackage:{Region}:{Account}:{Channels}/{ChannelId}",
        # "AWS::MediaStore::Resource":                                      "arn:aws:mediastore:{Region}:{Account}:{ResourceType}/{ResourceId}",
        # "AWS::MediaTailor::PlaybackConfiguration":                        "arn:aws:mediatailor:{Region}:{Account}:{PlaybackConfiguration}/{Name}",
        # "AWS::MobileHub::Project":                                        "arn:aws:mobilehub:{Region}:{Account}:project/{ProjectId}",
        # "AWS::MobileTargeting::App":                                      "arn:aws:mobiletargeting:{Region}:{Account}:apps/{AppId}$",
        # "AWS::MobileTargeting::Campaign":                                 "arn:aws:mobiletargeting:{Region}:{Account}:apps/{AppId}/campaigns/{CampaignId}",
        # "AWS::MobileTargeting::Segment":                                  "arn:aws:mobiletargeting:{Region}:{Account}:apps/{AppId}/segments/{SegmentId}",
        # "AWS::Mq::Broker":                                                "arn:aws:mq:{Region}:{Account}:broker:{Broker}:{BrokerId}",
        # "AWS::Mq::Configuration":                                         "arn:aws:mq:{Region}:{Account}:configuration:{Configuration}:{ConfigurationId}",
        # "AWS::Opsworks::App":                                             "arn:aws:opsworks:{Region}:{Account}:app/{OpsworksAppId}",
        # "AWS::OpsworksCm::Server":                                        "arn:aws:opsworks-cm:{Region}:{Account}:server/{ServerNamerandomIdsuffix}/{ServerId}",
        # "AWS::Opsworks::Instance":                                        "arn:aws:opsworks:{Region}:{Account}:instance/{OpsworksInstanceId}",
        # "AWS::Opsworks::Layer":                                           "arn:aws:opsworks:{Region}:{Account}:layer/{LayerId}",
        # "AWS::OpsWorks::Stack":                                           "arn:aws:opsworks:{Region}:{Account}:stack/{StackId}",
        # "AWS::Organizations::Account":                                    "arn:aws:organizations::{Account}:account/{OorganizationId}/{AccountId}",
        # "AWS::Organizations::Handshake":                                  "arn:aws:organizations::{Account}:handshake/o-{OorganizationId}/{HandshakeType}/h-{HHandshakeId}",
        # "AWS::Organizations::Organization":                               "arn:aws:organizations::{Account}:organization/{OOrganizationId}",
        # "AWS::Organizations::Ou":                                         "arn:aws:organizations::{Account}:ou/{OorganizationId}/{OuorganizationalunitId}",
        # "AWS::Organizations::Policy":                                     "arn:aws:organizations::{Account}:policy/o-{OorganizationId}/{PolicyType}/p-{PPolicyId}",
        # "AWS::Organizations::Root":                                       "arn:aws:organizations::{Account}:root/{OorganizationId}/{RRootId}",
        # "AWS::Polly::Lexicon":                                            "arn:aws:polly:{Region}:{Account}:lexicon/{Lexicon}",
        # "AWS::Rds::Cluster":                                              "arn:aws:rds:{Region}:{Account}:cluster:{DbCluster}",
        # "AWS::Rds::ClusterPg":                                            "arn:aws:rds:{Region}:{Account}:cluster-pg:{Clusterparametergroup}",
        # "AWS::Rds::ClusterSnapshot":                                      "arn:aws:rds:{Region}:{Account}:cluster-snapshot:{ClusterSnapshot}",
        # "AWS::Rds::Db":                                                   "arn:aws:rds:{Region}:{Account}:db:{Dbinstance}",
        # "AWS::Rds::Es":                                                   "arn:aws:rds:{Region}:{Account}:es:{Subscription}",
        # "AWS::Rds::Og":                                                   "arn:aws:rds:{Region}:{Account}:og:{Optiongroup}",
        # "AWS::Rds::Pg":                                                   "arn:aws:rds:{Region}:{Account}:pg:{Parametergroup}",
        # "AWS::Rds::Secgrp":                                               "arn:aws:rds:{Region}:{Account}:secgrp:{ResourceId}",
        # "AWS::Rds::Snapshot":                                             "arn:aws:rds:{Region}:{Account}:snapshot:{Snapshot}",
        # "AWS::Rds::Subgrp":                                               "arn:aws:rds:{Region}:{Account}:subgrp:{ResourceId}",
        # "AWS::RedShift::Cluster":                                         "arn:aws:redshift:{Region}:{Account}:cluster:{Cluster}",
        # "AWS::RedShift::DbGroup":                                         "arn:aws:redshift:{Region}:{Account}:dbgroup:{Cluster}/{Databasegroup}",
        # "AWS::RedShift::DbName":                                          "arn:aws:redshift:{Region}:{Account}:dbname:{Cluster}/{Database}",
        # "AWS::RedShift::DbUser":                                          "arn:aws:redshift:{Region}:{Account}:dbuser:{Cluster}/{Databaseuser}",
        # "AWS::RedShift::Parametergroup":                                  "arn:aws:redshift:{Region}:{Account}:parametergroup:{Parametergroup}",
        # "AWS::RedShift::SecurityGroup":                                   "arn:aws:redshift:{Region}:{Account}:securitygroup:{SecurityGroup}",
        # "AWS::RedShift::Snapshot":                                        "arn:aws:redshift:{Region}:{Account}:snapshot:{Cluster}/{Snapshot}",
        # "AWS::RedShift::Subnetgroup":                                     "arn:aws:redshift:{Region}:{Account}:subnetgroup:{Subnetgroup}",
        # "AWS::ResourceGroups::Group":                                     "arn:aws:resource-groups:{Region}:{Account}:group/{Group}",
        # "AWS::RoboMaker::DeploymentFleet":                                "arn:aws:robomaker:{Region}:{Account}:deployment-fleet/{Fleet}/{Createdonepoch}",
        # "AWS::RoboMaker::DeploymentJob":                                  "arn:aws:robomaker:{Region}:{Account}:deployment-job/{DeploymentJobId}",
        # "AWS::RoboMaker::RobotApplication":                               "arn:aws:robomaker:{Region}:{Account}:robot-application/{RobotApplication}/{Createdonepoch}",
        # "AWS::RoboMaker::Robot":                                          "arn:aws:robomaker:{Region}:{Account}:robot/{Robot}/{Createdonepoch}",
        # "AWS::RoboMaker::SimulationApplication":                          "arn:aws:robomaker:{Region}:{Account}:simulation-application/{SimulationApplication}/{Createdonepoch}",
        # "AWS::RoboMaker::SimulationJob":                                  "arn:aws:robomaker:{Region}:{Account}:simulation-job/{SimulationJobId}",
        # "AWS::Route53::Change":                                           "arn:aws:route53:::change/{Change}",
        # "AWS::Route53::Domain":                                           "arn:aws:route53::{Account}:domain/{Domain}",
        # "AWS::Route53::Hostedzone":                                       "arn:aws:route53:::hostedzone/{Name}",
        # "AWS::Route53Resolver::ResolverEndpoint":                         "arn:aws:route53resolver:{Region}:{Account}:resolver-endpoint/{EndpointId}",
        # "AWS::Route53Resolver::ResolverRule":                             "arn:aws:route53resolver:{Region}:{Account}:resolver-rule/{RuleId}",
        "AWS::S3::Bucket":                                                  "arn:aws:s3:::{Name}",
        "AWS::S3::Job":                                                     "arn:aws:s3:{Region}:{Account}:job/{JobId}",
        "AWS::S3::Object":                                                  "arn:aws:s3:::{Name}/{Key}",
        "AWS::S3::AccessPoint":                                             "arn:aws:s3:{Region}:{Account}:accesspoint/{AccessPoint}",
        # "AWS::SageMaker::Endpoint":                                       "arn:aws:sagemaker:{Region}:{Account}:endpoint:{Endpoint}",
        # "AWS::SageMaker::EndpointConfig":                                 "arn:aws:sagemaker:{Region}:{Account}:endpoint-config:{EndpointConfig}",
        # "AWS::SageMaker::HyperParameterTuningJob":                        "arn:aws:sagemaker:{Region}:{Account}:hyper-parameter-tuning-job:{HyperParameterTuningJob}",
        # "AWS::SageMaker::Model":                                          "arn:aws:sagemaker:{Region}:{Account}:model:{Model}",
        # "AWS::SageMaker::NotebookInstance":                               "arn:aws:sagemaker:{Region}:{Account}:notebook-instance:{NotebookInstance}",
        # "AWS::SageMaker::NotebookInstanceLifeCycleConfig":                "arn:aws:sagemaker:{Region}:{Account}:notebook-instance-lifecycle-config:{NotebookInstanceLifeCycleConfig}",
        # "AWS::SageMaker::TrainingJob":                                    "arn:aws:sagemaker:{Region}:{Account}:training-job:{TrainingJob}",
        # "AWS::SageMaker::TransformJob":                                   "arn:aws:sagemaker:{Region}:{Account}:transform-job:{TransformJob}",
        # "AWS::SecretsManager::Secret":                                    "arn:aws:secretsmanager:{Region}:{Account}:secret:{Path}",
        # "AWS::ServerlessRepo::Application":                               "arn:aws:serverlessrepo:{Region}:{Account}:applications/{Application}",
        # "AWS::ServiceDiscovery::Namespace":                               "arn:aws:servicediscovery:{Region}:{Account}:namespace/{NamespaceId}",
        # "AWS::ServiceDiscovery::Service":                                 "arn:aws:servicediscovery:{Region}:{Account}:service/{ServiceId}",
        # "AWS::ServiceQuotas::Service":                                    "arn:aws:servicequotas:{Region}:{Account}:{ServiceCode}/{QuotaCode}",
        # "AWS::Ses::Identity":                                             "arn:aws:ses:{Region}:{Account}:identity/{Identity}",
        # "AWS::Sns::Topic":                                                "arn:aws:sns:{Region}:{Account}:{Topic}",
        # "AWS::Sqs::Queue":                                                "arn:aws:sqs:{Region}:{Account}:{Queue}",
        # "AWS::Ssm::AutomationActivity":                                   "arn:aws:ssm:{Region}:{Account}:automation-activity/{ActivityName}$",
        # "AWS::Ssm::AutomationDefinition":                                 "arn:aws:ssm:{Region}:{Account}:automation-definition/{Definition}:{Version}",
        # "AWS::Ssm::AutomationExecution":                                  "arn:aws:ssm:{Region}:{Account}:automation-execution/{ExecutionId}",
        # "AWS::Ssm::Document":                                             "arn:aws:ssm:{Region}:{Account}:document/{Document}",
        # "AWS::Ssm::MaintenanceWindow":                                    "arn:aws:ssm:{Region}:{Account}:maintenancewindow/{WindowId}",
        # "AWS::Ssm::ManagedInstance":                                      "arn:aws:ssm:{Region}:{Account}:managed-instance/{InstanceId}",
        # "AWS::Ssm::ManagedInstanceInventory":                             "arn:aws:ssm:{Region}:{Account}:managed-instance-inventory/{InstanceId}",
        # "AWS::Ssm::Opsitem":                                              "arn:aws:ssm:{Region}:{Account}:opsitem/{OpsitemId}",
        # "AWS::Ssm::Parameter":                                            "arn:aws:ssm:{Region}:{Account}:parameter/{Parameter}",
        # "AWS::Ssm::Patchbaseline":                                        "arn:aws:ssm:{Region}:{Account}:patchbaseline/{BaselineId}",
        # "AWS::States::Activity":                                          "arn:aws:states:{Region}:{Account}:activity:{Activity}",
        # "AWS::States::Execution":                                         "arn:aws:states:{Region}:{Account}:execution:{Statemachine}:{Execution}",
        # "AWS::States::StateMachine":                                      "arn:aws:states:{Region}:{Account}:{Activity}:{Activity}",
        # "AWS::StorageGateway::Device":                                    "arn:aws:storagegateway:{Region}:{Account}:gateway/{GatewayId}/device/{DeviceId}",
        # "AWS::StorageGateway::Gateway":                                   "arn:aws:storagegateway:{Region}:{Account}:gateway/{GatewayId}$",
        # "AWS::StorageGateway::Share":                                     "arn:aws:storagegateway:{Region}:{Account}:share/{ShareId}",
        # "AWS::StorageGateway::Tape":                                      "arn:aws:storagegateway:{Region}:{Account}:tape/{TapeBarCode}",
        # "AWS::StorageGateway::Target":                                    "arn:aws:storagegateway:{Region}:{Account}:gateway/{GatewayId}/target/{TargetId}",
        # "AWS::StorageGateway::Volume":                                    "arn:aws:storagegateway:{Region}:{Account}:gateway/{GatewayId}/volume/{VolumeId}",
        # "AWS::Sts::AssumedRole":                                          "arn:aws:sts::{Account}:assumed-role/{Role}/{RoleSession}",
        # "AWS::Sts::FederatedUser":                                        "arn:aws:sts::{Account}:federated-user/{User}",
        # "AWS::Swf::Domain":                                               "arn:aws:swf:{Region}:{Account}:{Resource}/domain/{Domain}",
        # "AWS::Transfer::Server":                                          "arn:aws:transfer:{Region}:{Account}:server/{ServerId}",
        # "AWS::Transfer::User":                                            "arn:aws:transfer:{Region}:{Account}:user/{ServerId}/{User}",
        # "AWS::Trustedadvisor::Check":                                     "arn:aws:trustedadvisor:{Region}:{Account}:checks/{CategoryCode}/{CheckId}",
        # "AWS::WafRegional::Resource":                                     "arn:aws:waf-regional:{Region}:{Account}:{ResourceType}/{ResourceId}",
        # "AWS::Waf::Resource":                                             "arn:aws:waf::{Account}:{ResourceType}/{ResourceId}",
        # "AWS::WorkLink::Fleet":                                           "arn:aws:worklink::{Account}:fleet/{Fleet}"
    }
    regex = {
        "Region":   "([a-z0-9-]*)",
        "Account":  "(\d{12})?",
        "Provider": "(.*)",
        "Key":      "(.*)",
        "Default":  "([A-Za-z0-9-_]*)",
    }

    def __init__(self):

        format_string = re.compile("{([A-Za-z]+)}")
        for k, v in self.types.items():
            self[k] = self.types[k]
            for placeholder in set(format_string.findall(v)):
                self[k] = self[k].replace(f"{{{placeholder}}}", "(?P<{placeholder}>{regex})".format(
                    placeholder=placeholder,
                    regex=str(self.regex[placeholder] if placeholder in self.regex
                              else self.regex["Default"])))
            self[k] += '$'

    def definition(self, k):
        if k not in self.types:
            return ""
        elif self.types[k][-1] == "$":
            return self.types[k][0:-1]
        else:
            return self.types[k]

    def label(self, arn):
        for k, v in self.items():
            if re.match(v, arn):
                return k
        return None


RESOURCES = Resources()
